//================  Введение в DOM  ==============

//------------- через CTRL+F ----------------
//1.https://www.youtube.com/watch?v=0NFNXt47vnk
//2.Максимально близкая к идеальной реализации корзины getCartFullPrice;
//3.reduce, аккумулятор;
//4.Обьекты, их методы, свойства; Первоначальные обьекты нельзя изменять;
//5.получение ключей через for...in; получение значений через for...of;
//6.укороченная запись функции/метода; метод [Symbol.iterator]; yield;
//7.Обьекты и ссылки; создаем какой то обьект, а в переменную кладем ссылку;
//8.контекст и this
//9.проверка на ключ в массиве
//10.игра
//11.Home work, task 1: Написать функцию, преобразующую число в объект;
//task 2: Для игры, реализованной на уроке, добавить возможность вывода хода номер n;
//task 3: Не давать игроку выходить за пределы поля.
//task 4: *На базе игры, созданной на уроке, реализовать игру «Кто хочет стать миллионером?»
//===============================================
a = 65;
b = 73;
alert(a + b * b);

/*
//=====================   DOM   =======================

//По своей сути всё что мы видим в браузере, каждый элементик, он 
//формирует для себя эту обьектную модель и каждый элемент хранится
//как отдельный обьект, к которому можно обратиться и как то с ним
//взаимодействовать - изменять стили, изменять его содержимое,
//добавить что то, удалить, переместить и т д. 

//При этом у нас не происходит каких то жестких перезагрузок, если
//мы что то меняем в этом обьекте, связанном с каким то элементом
//на странице, то моментально видим какие то изменения, что мы 
//сделали - что меняется.

//Забегая вперед, есть еще реактивные фреймворки, которые
//моментально реагируют на ваши изменения на странице, которые
// не перезагружают полностью вашу страницу, а частично 
//динамически что то меняют.

//Помимо обычного DOM еще используется виртуальный DOM, чтобы
//лишний раз не работать с ресурсозатратными операциями
//обычного DOM'а, в фреймворках используется виртуальный DOM,
//как раз для повышения быстродействия.

//Всю структуру документа можно представить как дерево, самое
//главное - обьект 'Document', но еще САМОЕ главное в плане
//обьектных документов - это window, потом document, а потом
//уже все остальное: и html - который содержит в себе всю
//страницу, далее head, head содержит title, title содержит
//какой то text.

//Далее формируется body, body может содержать какие то 
//теги, в тех тегах могут еще быть теги, в тегах еще могут
//теги, вложенности сколько угодно может быть.

//На основе этой структуры, как вы делаете разметку, как вы
//составляете элементы в разметке, формируется Обьект, со
//своими дочерними элементами, у дочерних элементов можно 
//получить доступ к родительским, и т д , все становится
//СВЯЗАННЫМ, и со всем этим уже можно работать в JS, легко
//и просто.

//Как все это дело формируется ?
//Документ наш интерпретатор обрабатывает сверху вниз:
//открывающий title, все что есть внутри, закрывающий
//title. Когда у нас страничка загрузится браузер начинает
//обрабатывать эту разметку, если встречаются какие то
//скрипты - он их по ходу выполняет и в итоге мы видим то
//что мы видим когда заходим на сайт, в приложении

//Во время чтения создается набор сущностей, которые 
//связаны между собой - как раз то что мы делае в 
//разметке, в JS, мы можем работать через обьекты, т е
//браузер формирует обьект с этими элементами, устанавливает
//связи между ними и мы можем спокойно общаться с этими
//элементами.

//Код на JS общается с DOM, обращаясь к элементам 
//верски и их содержимому. Если вдруг мы этот код 
//подключили к DOM раньше чем отрендерится разметка, 
//то этот код работать не будет, и может все сломаться - 
//страничка повиснет, ошибка выползет какая то, или
//вообще ничего не загрузится до конца верстки.

//Поэтому это тоже нужно принимать во внимание и 
//располагать код JS-документа где нибудь в конце,
//перед закрывающим body например, или подключать теги
//через async или defer в зависимости от того, что 
//вообще этот код делает


*/





